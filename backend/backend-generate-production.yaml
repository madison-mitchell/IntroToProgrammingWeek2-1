kind: Deployment
apiVersion: apps/v1
metadata:
  name: songs-api
  labels:
    app.kubernetes.io/name: 'songs-api'
    app.kubernetes.io/part-of: 'backend'
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: songs-api
  template:
    metadata:
      labels:
        app.kubernetes.io/name: 'songs-api'
        app.kubernetes.io/part-of: 'backend'
    spec:
      containers:
      - name: songs-api
        image: jeffrygonzalez/songs-api:1.0.0
        imagePullPolicy: Always
        env:
        - name: ConnectionStrings__mongodb
          value: 'mongodb'
        - name: DOTNET_LOGGING__CONSOLE__DISABLECOLORS
          value: 'true'
        - name: ASPNETCORE_URLS
          value: 'http://*'
        - name: PORT
          value: '80'
        - name: SERVICE__SONGS-API__PROTOCOL
          value: 'http'
        - name: SERVICE__SONGS-API__PORT
          value: '80'
        - name: SERVICE__SONGS-API__HOST
          value: 'songs-api'
        - name: CONNECTIONSTRINGS__MONGODB
          valueFrom:
            secretKeyRef:
              name: 'binding-production-mongodb-secret'
              key: 'connectionstring'
        ports:
        - containerPort: 80
...
---
kind: Service
apiVersion: v1
metadata:
  name: songs-api
  labels:
    app.kubernetes.io/name: 'songs-api'
    app.kubernetes.io/part-of: 'backend'
spec:
  selector:
    app.kubernetes.io/name: songs-api
  type: ClusterIP
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: 80
...
---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: songsingress
  annotations:
    kubernetes.io/ingress.class: 'nginx'
    nginx.ingress.kubernetes.io/rewrite-target: '/$2'
  labels:
    app.kubernetes.io/part-of: 'backend'
spec:
  rules:
  - http:
      paths:
      - backend:
          service:
            name: songs-api
            port:
              number: 80
        pathType: Prefix
        path: /api(/|$)(.*)
...
